version: "3.9"
services:
  autoheal:
    restart: on-failure
    image: willfarrell/autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  socket:
    build:
      context: ./socket
      args:
        NODE_ENV: development
    ports:
      - 6500:6500
    tty: true
    env_file: socket/.env
    restart: on-failure
    command: npm run dev
    depends_on:
      - frontend
      - backend

    networks:
      - app

  backend:
    build:
      context: ./server
      args:
        NODE_ENV: development

    depends_on:
      - mongo
      - redis
    restart: on-failure

    env_file: server/.env

    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules

    tty: true
    #  /run/secrets/db_password
    environment:
      - DB_HOST=mongo
      - REDIS_DB_HOST=redis
      - DB_USER=root
      - DB_PASSWORD=example
      - DB_NAME=Blog
      - NODE_ENV=development

    command: npm run dev

    ports:
      - 5000:5000

    networks:
      - app

    secrets:
      - db_password

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    environment:
      - CHOKIDAR_USEPOLLING=true
    ports:
      - 3000:3000

    env_file: client/.env
    tty: true
    restart: on-failure
    networks:
      - app
    depends_on:
      - backend

  mongo:
    image: mongo
    restart: on-failure
    volumes:
      - db-data:/var/lib/mongo/data
    ports:
      - 27017:27017

    networks:
      - app

    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example

  redis:
    image: redis:6.2.6-alpine

    restart: on-failure
    ports:
      - 6379:6379
    volumes:
      - redis:/data

    command: redis-server --save 20 1 --loglevel warning --requirepass nopass
    networks:
      - app

  nginx:
    image: nginx:1.21.5-alpine

    restart: on-failure
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx-dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    networks:
      - app

networks:
  app:
    driver: bridge

volumes:
  db-data:
  redis:
secrets:
  db_password:
    file: db_password.txt
